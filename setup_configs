#!/usr/bin/env python

import os
import glob
from sys import version_info
if version_info.major == 2:
    input = raw_input


pwd = os.environ['PWD']
home = os.environ['HOME']
scriptsFolder = os.path.join(home, '.scripts')
i3Folder = os.path.join(home, '.i3')
i3StatusFolder = os.path.join(home, '.config/i3status')
conkyFolder = os.path.join(home, '.conky')

def setupConfigs(isDesktop = False, isLRZ = False):
    ## Scripts
    if not os.path.isdir(scriptsFolder): os.makedirs(scriptsFolder)
    for scriptPath in glob.glob(os.path.join(pwd, 'scripts/*')):
        linkFile(scriptPath, scriptsFolder, isDesktop = isDesktop, isLRZ = isLRZ)
    
    ## Shell
    linkFile(os.path.join(pwd, 'shell/zshrc'), home, targetFileName = '.zshrc', isDesktop = isDesktop, isLRZ = isLRZ)

    ## i3
    if not isLRZ:
        if not os.path.isdir(i3Folder): os.makedirs(i3Folder)
        if not os.path.isdir(i3StatusFolder): os.makedirs(i3StatusFolder)
        for fileName in glob.glob(os.path.join(pwd, 'i3/*')):
            targetFolder = i3Folder
            if '.i3status' in fileName:
                targetFolder = i3StatusFolder
            targetFileName = None
            if 'config.' in fileName:
                targetFileName = 'config'
            linkFile(fileName, targetFolder, targetFileName = targetFileName, isDesktop = isDesktop, isLRZ = isLRZ)

    ## X11 stuff
    linkFile(os.path.join(pwd, 'xconfigs/xmodmap'), home, targetFileName = '.xmodmap', isDesktop = isDesktop, isLRZ = isLRZ)
    for fileName in glob.glob(os.path.join(pwd, 'xconfigs/Xresources.*')):
        linkFile(fileName, home, targetFileName = '.Xresources', isDesktop = isDesktop, isLRZ = isLRZ)

    ## Termite
    for fileName in glob.glob(os.path.join(pwd, 'termite/config.*')):
        linkFile(fileName, os.path.join(home, '.config', 'termite'), targetFileName = 'config', isDesktop = isDesktop, isLRZ = isLRZ)

    ## conky setup (only on Laptop)
    if not isDesktop and not isLRZ:
        if not os.path.isdir(conkyFolder): os.makedirs(conkyFolder)
        for fileName in glob.glob(os.path.join(pwd, 'conky/*')):
            linkFile(fileName, conkyFolder, isDesktop = isDesktop, isLRZ = isLRZ)

    ## Git
    os.system('./git/setup_aliases.sh')

def linkFile(sourceFile, targetFolder, targetFileName = None, isDesktop = False, isLRZ = False):
    if sourceFile.endswith('.desktop') and not isDesktop: return
    if sourceFile.endswith('.laptop') and (isDesktop or isLRZ): return
    if sourceFile.endswith('.lrz') and not isLRZ: return
    targetFile = targetFileName or sourceFile.rsplit('/', 1)[-1]
    for suffix in ['.desktop', '.laptop', '.lrz']:
        if targetFile.endswith(suffix): targetFile = targetFile.rsplit(suffix, 1)[0]
    os.system('mkdir -p {}'.format(targetFolder))
    targetFile = os.path.join(targetFolder, targetFile)
    if os.path.isfile(targetFile): os.remove(targetFile)
    os.symlink(sourceFile, targetFile)

def prompt(is_desktop, is_lrz):
    while True:
        message = 'Will make config setup for '
        if is_desktop:
            message += 'Desktop'
        elif is_lrz:
            message += 'LRZ'
        else:
            message += 'Laptop'
        message += '. Proceed?'
        string = input('{} (y/n): '.format(message))
        if string == 'y':
            return True
        elif string == 'n':
            return False
        else:
            print ('Please answer with "y" or "n"')


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description = 'Configs setup script')
    parser.add_argument('-d', action = 'store_true', dest = 'isDesktop', help = 'Make setup for desktop', default = False)
    parser.add_argument('-l', action = 'store_true', dest = 'isLRZ', help = 'Make setup for LRZ', default = False)
    args = parser.parse_args()
    if not prompt(args.isDesktop, args.isLRZ):
        exit(1)
    setupConfigs(isDesktop = args.isDesktop, isLRZ = args.isLRZ)
